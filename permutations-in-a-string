Leetcode - 567
https://leetcode.com/problems/permutation-in-string/

********SLIDING WINDOW TECHNIQUE IS USED*******


class Solution {
    public boolean checkInclusion(String s1, String s2) {
       if(s1.length()>s2.length())
           return false;
       int[] arr=new int[26];
       int[] arr2=new int[26];
       for(char ch:s1.toCharArray())
       {
        arr2[ch-'a']++;
       }
       for(int i=0;i<s2.length();i++)
       {
           if(i<s1.length())
           {
               arr[s2.charAt(i)-'a']++;
               if(s1.length()-1==i)
               {
                if(compare(arr,arr2))
                    return true;
               }
           }
           else
           {
              arr[s2.charAt(i)-'a']++;              ####
              arr[s2.charAt(i-s1.length())-'a']--;    ########
              if(compare(arr,arr2))
                    return true;
           }
       }
        return false;
    }
    
    boolean compare(int[] arr1,int[] arr2)
    {
     for(int i=0;i<arr1.length;i++)
     {
         if(arr1[i]<arr2[i])
             return false;
     }
     return true;
    }
}

//code 2


class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int strCountArray[]=new int[26];
        int patternCountArray[]=new int[26];
        for(char chr:s1.toCharArray()){
            patternCountArray[chr-'a']++;
        }
        int start=0;
        int windowSize=s1.length();
        for(int windowEnd=0;windowEnd<s2.length();windowEnd++){
            strCountArray[s2.charAt(windowEnd)-'a']++;
            if(windowEnd>=windowSize-1){
                if(checkTwoArraysIsEqual(strCountArray,patternCountArray)) return true;
                strCountArray[s2.charAt(start)-'a']--;
                start++;
            }
        }
        return false;
    }
    private static boolean checkTwoArraysIsEqual(int strCountArray[],int patternCountArray[]){
        for(int i=0;i<26;i++){
            if(strCountArray[i]!=patternCountArray[i])return false;
        }
        return true;
    }
    // Time Complexity -BIG O(N+M)
    // Space Complexity - BIG O(1)
}
